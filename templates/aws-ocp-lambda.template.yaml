AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Lambda functions required for the AWS EKS Quick Start (qs-1p7nknoh4)
Parameters:
  ExecuteCFRoleArn:
    Description: CloudFormation Execution Arn
    Type: String
    
Resources:
  DeployCFFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Deploys CloudFormation Stacks 
      Handler: index.handler
      Runtime: python3.7
      Role: !Ref ExecuteCFRoleArn
      Timeout: 900
      Code:
        ZipFile: |
        import cfnresponse
        import logging
        import boto3
        logger = logging.getLogger(__name__)

        def stack_exists(cf_client, stack_name):
            stack_status_codes = ['CREATE_COMPLETE',
                                  'UPDATE_COMPLETE',
                                  'UPDATE_ROLLBACK_COMPLETE',
                                  'ROLLBACK_COMPLETE']
            for s in stacks_by_status(cf_client, stack_status_codes):
                if s.get('StackName', '') == stack_name:
                    return s
            return None
        def stacks_by_status(cf_client, status_include_filter):
            """
            ``status_include_filter`` should be a list ...
            """
            pages = cf_client.get_paginator('list_stacks').paginate(
                StackStatusFilter=status_include_filter)
            for page in pages:
                for s in page.get('StackSummaries', []):
                    yield s
        def parse_properties(properties):
            cf_params = {'Capabilities': ['CAPABILITY_IAM',
                                'CAPABILITY_AUTO_EXPAND',
                                'CAPABILITY_NAMED_IAM']
            }
            cf_params["Parameters"] = []
            for key, value in properties.items():
                if key == "StackName":
                    cf_params["StackName"] = value
                elif key == "TemplateURL":
                    cf_params["TemplateURL"] = value
                elif key == "NumStacks":
                    cf_params["NumStacks"] = value
                elif key == "KeyToUpdate":
                    cf_params["KeyToUpdate"] = value
                else:
                    temp = {'ParameterKey': key, 'ParameterValue': value}
                    print(temp)
                    cf_params["Parameters"].append(temp)
            return cf_params

        def loop_child_stacks(cf_client, cf_params, action):
            waiter_array = []
            numStacks = 1
            found = False
            counter = 0
            if "KeyToUpdate" in cf_params:
                print("in key to Update")
                for param in cf_params["Parameters"]:
                    print(param)
                    if param["ParameterKey"] == cf_params["KeyToUpdate"]:
                        found = True
                        break
                    counter += 1
                del cf_params["KeyToUpdate"]  
            if "NumStacks" in cf_params:    
                numStacks = cf_params["NumStacks"]
                del cf_params["NumStacks"]
            for x in range(numStacks):
                if found:
                    cf_params["Parameters"][counter]["ParameterValue"] = str(x)
                original_name = cf_params["StackName"]
                cf_params["StackName"] = "{}-{}".format(cf_params["StackName"],x)
                stack = stack_exists(cf_client=cf_client, stack_name=cf_params["StackName"])
                if action == "create" and stack == None:
                    stack_result = cf_client.create_stack(**cf_params)
                    waiter_array.append(cf_params["StackName"])
                  
                elif action == "delete" and stack:
                    print("found and deleting stack")
                    stack_result = cf_client.delete_stack(StackName=cf_params["StackName"])
                    waiter_array.append(cf_params["StackName"])

                cf_params["StackName"] = original_name
            if action == "create":
                waiter = cf_client.get_waiter('stack_create_complete')
            elif action == "delete":
                waiter = cf_client.get_waiter('stack_delete_complete')
            wait_to_complete(waiter,waiter_array)
                
        def wait_to_complete(waiter, waiter_array):
            while( len(waiter_array) > 0):
                cur_waiter = waiter_array.pop()
                print('...waiting for stack to be ready...')
                waiter.wait(StackName=cur_waiter)
                stack = stack_exists(cf_client=cf_client, stack_name=cur_waiter)

        def handler(event,context):
            logger.debug(event)
            status = cfnresponse.SUCCESS
            try:
                cf_client = boto3.client('cloudformation')
                cf_params = parse_properties(event['ResourceProperties'])
                if event['RequestType'] == 'Delete':
                    logger.info(event)
                    loop_child_stacks(cf_client=cf_client, cf_params=cf_params,action="delete")
                    print("Completed")
                elif event['RequestType'] == 'Update':
                    print("Only currently supported for adding entries")
                else:
                    loop_child_stacks(cf_client=cf_client, cf_params=cf_params,action="create")
                    print("Completed")
            except Exception:
                logging.error('Unhandled exception', exc_info=True)
                status = cfnresponse.FAILED
            finally:
                cfnresponse.send(event, context, status, {}, None)