AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys Lambda functions required for the AWS OpenShift labs
Parameters:
  LambdaZipsBucketName:
    Description: Bucket Name where the lambda zip files should be placed
    Type: String
  CopyZipsRoleArn:
    Description: CloudFormation CopyZips Exception Arn
    Type: String
  ExecuteCFRoleArn:
    Description: CloudFormation Execution Arn
    Type: String
  GenerateIgnitionConfigRoleArn:
    Description: OpenShift installer Executor (GenerateIngitionConfigs) Arn
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: 'Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).'
    Default: aws-quickstart
    Description: 'S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: aws-ocp/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
Resources:
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !Ref CopyZipsRoleArn
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import boto3
          logger = logging.getLogger(__name__)
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {'Bucket': source_bucket, 'Key': key}
                  logging.info(f'copy_source: {copy_source}\ndest_bucket: {dest_bucket}\nkey: {key}')
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def handler(event, context):
              logger.debug(event)
              status = cfnresponse.SUCCESS
              try:
                  if event['RequestType'] == 'Delete':
                      delete_objects(event['ResourceProperties']['DestBucket'], event['ResourceProperties']['Prefix'],
                                     event['ResourceProperties']['Objects'])
                  else:
                      copy_objects(event['ResourceProperties']['SourceBucket'], event['ResourceProperties']['DestBucket'],
                                   event['ResourceProperties']['Prefix'], event['ResourceProperties']['Objects'])
              except Exception:
                  logging.error('Unhandled exception', exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, None)
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref LambdaZipsBucketName
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
      - functions/packages/DeployCF/lambda.zip
      - functions/packages/GenerateIgnitionFiles/lambda.zip
  DeployIgnitionLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates Ignition Files
      Handler: lambda_function.handler
      MemorySize: 512
      Runtime: python3.7
      Role: !Ref GenerateIgnitionConfigRoleArn
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/GenerateIgnitionFiles/lambda.zip'
  DeployCFLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: Deploys CloudFormation Stacks 
      Handler: lambda_function.handler
      MemorySize: 128
      Runtime: python3.7
      Role: !Ref ExecuteCFRoleArn
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaZipsBucketName
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeployCF/lambda.zip'
          
Outputs:
  DeployIgnitionLambdaArn:
    Value: !GetAtt DeployIgnitionLambda.Arn
  DeployCFLambdaArn:
    Value: !GetAtt DeployCFLambda.Arn